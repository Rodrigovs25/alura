//g++ jogo_da_forca.cpp -std=c++11
//./a.out

//windows mingw32-make forca

//g++ *.cpp -o forca.out -> compilar todos os arquivos .cpp

//ctrl + d -> selecionar todos juntos

// extern: variavel existe em algum lugar, n precisar define ela aqui

// #pragma once // evitar os includes duplicados, o arquivo só deve ser incluido uma vez

//g++ -c adiciona_palavra.cpp -> o -c mandar o compilador só compilar o arquivo, gerar o .o (codigo objeto)

//cat nome_arquivo -> ler o arquivo no terminal

//g++ -c *.cpp -> gerar os objetos de todos os objetos(unidade de tradução)

//g++ *.o -o forca.out -> linkar,juntar todos os arquivos e jogar no .out

//https://faculty.cs.niu.edu/~mcmahon/CS241/Notes/build.html

função inline:
- performace e controle do arquivo
- função simples nao precisam estar no outro lado da memoria, não tem paramentros e não retorna nada
- colar as intruçoes aonde a função é chamada para evitar abrir um outro espaço na memoria para compilar
- função copiada para o hpp, nao pode existe o .cpp
- nao é uma unidade de tradução
- nao vai ser comnpilada, e sim importada para outro unidade tradução
- definição no .hpp
- O compilador é o responsável por decidir se a função vai passar pelo processo de inline ou não. Se o 
  compilador não conhecer o código, ou seja, a implementação da função, ele não vai poder fazer 
  isso. Por isso funções inline não ficam em unidades de tradução separadas, mas sim são incluídas 
  nas que fazem uso delas.

extern std::map<char, bool> chutou; // variavel existe em algum lugar, n precisar define ela aqui
chutes_errados->push_back(chute); //(*chutes_errados).push_back(chute);

Receber as referencias do paramentros para evitar a utilização de memoria

const: nao modificar o endereço de memoria
Este operador basicamente chama uma função e essa função retorna uma referência. Sendo assim, nós 
poderíamos alterar o valor interno do mapa em alguns cenários. Além disso, como se trata de um 
booleano, ao tentar acessar um item não existente, o valor false é definido automaticamente, o 
que também faz que nós quebremos nossa promessa de const.

Static: a variavel so existe nessa unidade de tradução, nesse arquivo e não pode ser acessado por outro arquivo
.cpp como sorteia palavra, mas pode ser acessado no .hpp como imprime_cabecalho.
- se for preciso definir variaveis fora da função use o static, para ter um melhor controle sem q alguem de 
fora modifique o arquivo
- Quando diversas funções do mesmo arquivo precisarem acessar a mesma variável.

Namespace: delimitar em uma pasta
- :: operador de resolução de nome: Basicamente este operador nos permite resolver nomes. Exemplo, dentro 
do namespace com nome Forca, acesse a função com nome imprime_erros: Forca::imprime_erros.
- nunca usar using namespace em arquivos de cabecalho .hpp, tirar o pode de definir funções, se dentro de 
uma função função, while ou {}
- namespace a = Forca -> pode renomear namespaces
  a::imprime_erros
- using namespace std; -> evitar usar de forma global, pode usar na identação
- redefinar tudo para ser mais eficiente
- Se eu utilizo um tipo que eu criei chamado map e em seu arquivo de cabeçalho que eu preciso incluir 
existir using namespace std, como o compilador vai saber qual map eu quero usar?

#if 0 ou 1
#endif
- vai ler ou nao o que esta no programa

int* j = new int -> alocar memoria
delete j; -> desalocar a memoria
- Heap é um local de acesso irrestrito a todas as funções do seu programa. Uma memória alocada na heap
pela função X continua existindo e sendo válida mesmo depois que a função X terminar, a menos que 
alguém libere esse espaço. Por isso o controle é mais complexo.

array<tipo, tamanho> -> consegue saber o tamanho
substiuir vector por array, adicionar um int para contar os chutes errados